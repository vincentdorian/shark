[
  {
    "id": "accordion",
    "name": "Accordion",
    "description": "A simple accordion component",
    "files": [
      {
        "name": "accordion.tsx",
        "content": "import {\r\n  Accordion as ArkAccordion,\r\n  AccordionTrigger as ArkAccordionTrigger,\r\n  AccordionItem as ArkAccordionItem,\r\n  AccordionContent as ArkAccordionContent,\r\n  AccordionIcon as ArkAccordionIcon,\r\n} from \"@ark-ui/vue\";\r\n\r\nimport type {\r\n  AccordionProps as ArkAccordionProps,\r\n  AccordionTriggerProps as ArkAccordionTriggerProps,\r\n  AccordionItemProps as ArkAccordionItemProps,\r\n  AccordionContentProps as ArkAccordionContentProps,\r\n  AccordionIconProps as ArkAccordionIconProps,\r\n} from \"@ark-ui/vue\";\r\n\r\nimport { useUniqueChild } from \"~/lib/utils\";\r\n\r\nexport interface AccordionProps extends ArkAccordionProps {}\r\nexport interface AccordionTriggerProps extends ArkAccordionTriggerProps {}\r\nexport interface AccordionItemProps extends ArkAccordionItemProps {}\r\nexport interface AccordionContentProps extends ArkAccordionContentProps {}\r\n\r\nconst VueAccordionProps = {\r\n  modelValue: {\r\n    type: [String, Object] as PropType<AccordionProps[\"modelValue\"]>,\r\n  },\r\n  collapsible: {\r\n    type: Boolean as PropType<AccordionProps[\"collapsible\"]>,\r\n    default: false,\r\n  },\r\n  multiple: {\r\n    type: Boolean as PropType<AccordionProps[\"multiple\"]>,\r\n    default: false,\r\n  },\r\n  disabled: {\r\n    type: Boolean as PropType<AccordionProps[\"disabled\"]>,\r\n    default: false,\r\n  },\r\n  ids: {\r\n    type: Object as PropType<AccordionProps[\"ids\"]>,\r\n  },\r\n  getRootNode: {\r\n    type: Function as PropType<AccordionProps[\"getRootNode\"]>,\r\n  },\r\n  orientation: {\r\n    type: String as PropType<AccordionProps[\"orientation\"]>,\r\n  },\r\n};\r\n\r\nconst VueAccordionItemProps = {\r\n  value: {\r\n    type: String,\r\n    default: \"\",\r\n  },\r\n  disabled: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n};\r\n\r\nconst Accordion = defineComponent({\r\n  name: \"Accordion\",\r\n  emits: [\"update:modelValue\", \"change\"],\r\n  props: VueAccordionProps,\r\n  setup(props, { slots, attrs }) {\r\n    return () => {\r\n      return (\r\n        <ArkAccordion {...props} {...attrs}>\r\n          {slots.default?.()}\r\n        </ArkAccordion>\r\n      );\r\n    };\r\n  },\r\n});\r\n\r\nconst AccordionItem = defineComponent({\r\n  name: \"AccordionItem\",\r\n  props: VueAccordionItemProps,\r\n  setup(props, { slots, attrs }) {\r\n    return () => {\r\n      return (\r\n        <ArkAccordionItem class={\"border-b\"} {...props} {...attrs}>\r\n          {slots.default?.()}\r\n        </ArkAccordionItem>\r\n      );\r\n    };\r\n  },\r\n});\r\n\r\nconst AccordionTrigger = defineComponent({\r\n  name: \"AccordionTrigger\",\r\n  props: {\r\n    asChild: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  setup(props, { slots, attrs }) {\r\n    return () => {\r\n      const defaultSlot = useUniqueChild(slots, \"default\");\r\n\r\n      return (\r\n        <ArkAccordionTrigger\r\n          {...props}\r\n          class=\"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-expanded]>svg]:rotate-180\"\r\n          {...attrs}\r\n        >\r\n          {defaultSlot}\r\n        </ArkAccordionTrigger>\r\n      );\r\n    };\r\n  },\r\n});\r\n\r\nconst AccordionContent = defineComponent({\r\n  name: \"AccordionContent\",\r\n  setup(_, { slots, attrs }) {\r\n    return () => {\r\n      return (\r\n        <ArkAccordionContent\r\n          class=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[expanded]:animate-accordion-down\"\r\n          {...attrs}\r\n        >\r\n          <div class=\"pb-4 pt-0\">{slots.default?.()}</div>\r\n        </ArkAccordionContent>\r\n      );\r\n    };\r\n  },\r\n});\r\n\r\nexport { Accordion, AccordionTrigger, AccordionItem, AccordionContent };\r\n"
      }
    ]
  },
  {
    "id": "button",
    "name": "Button",
    "description": "A simple button component",
    "files": [
      {
        "name": "button.tsx",
        "content": "import { VariantProps, cva } from \"class-variance-authority\";\r\nimport { defineComponent } from \"vue\";\r\nimport type { ButtonHTMLAttributes } from \"vue\";\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\r\n        outline:\r\n          \"border border-input hover:bg-accent hover:text-accent-foreground\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"underline-offset-4 hover:underline text-primary\",\r\n      },\r\n      size: {\r\n        default: \"h-10 py-2 px-4\",\r\n        sm: \"h-9 px-3 rounded-md\",\r\n        lg: \"h-11 px-8 rounded-md\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n);\r\n\r\nexport interface ButtonProps\r\n  extends ButtonHTMLAttributes,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst Button = defineComponent({\r\n  name: \"Button\",\r\n  props: {\r\n    asChild: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    variant: {\r\n      type: String as PropType<ButtonProps[\"variant\"]>,\r\n      default: \"default\",\r\n    },\r\n    size: {\r\n      type: String as PropType<ButtonProps[\"size\"]>,\r\n      default: \"default\",\r\n    },\r\n    type: {\r\n      type: String as PropType<ButtonProps[\"type\"]>,\r\n      default: \"button\",\r\n    },\r\n  },\r\n  setup(props, { slots, attrs }) {\r\n    const { variant, size, asChild, type } = props;\r\n    const classes = buttonVariants({ variant, size });\r\n\r\n    /* if class in attrs then */\r\n    if (attrs.class) {\r\n      attrs.class = `${attrs.class} ${classes}`;\r\n    }\r\n    \r\n    return () => {\r\n      return <button class={classes} {...attrs}>{slots.default?.()}</button>;\r\n    };\r\n  },\r\n});\r\n\r\nexport { Button, buttonVariants };\r\n"
      }
    ]
  }
]